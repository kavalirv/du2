
def qd_tree_complete(points):
    if len(points) <= 2:
        print(points)
        return points
    left = 0
    right = len(points)
    mid = int((left+right-1)//2)  # -1 řeší dělění lichých čísel

    #  sort podle x
    points.sort(key=lambda p: p[0])
    lefty_x = points[:mid]
    righty_x = points[mid:]
    middle_x = lefty_x[-1]
    print("Middle point: {}, body před: {}, body za: {}".format(middle_x, lefty_x, righty_x))

    #  sort podle y
    points.sort(key=lambda p: p[1])
    lefty_y = points[:mid]
    righty_y = points[mid:]
    middle_y = lefty_y[-1]
    print("Middle point: {}, body před: {}, body za: {}".format(middle_y, lefty_y, righty_y))

    #  rozdělení do 4 kvadrantů podle velikostí na osách x a y
    lefty_xy = [value for value in lefty_x if value in lefty_y]
    print(lefty_xy)
    righty_xy = [value for value in righty_x if value in righty_y]
    print(righty_xy)
    lefty_x_righty_y = [value for value in lefty_x if value in righty_y]
    print(lefty_x_righty_y)
    righty_x_lefty_y = [value for value in lefty_y if value in righty_x]
    print(righty_x_lefty_y)

qd_tree_complete([(0.2721733396134992, 0.16110421582040624), (0.5828583727174798, 0.14221065549839018), (0.7408569558116688, 0.836419046573464), (0.3299483355463435, 0.12215068526416473), (0.5610962373889725, 0.3706195830443474)])
# vzor s 50 body
# qd_tree_complete([(0.8860121911572348, 0.06453016720280613), (0.19219460801368693, 0.870348628498653), (0.6183609539892093, 0.6059099988869964), (0.6877538331060717, 0.013122394167403018), (0.18194598698151077, 0.5659325708670406), (0.3838046759564302, 0.11013470808486592), (0.13168742384805465, 0.6362117416561855), (0.4720758579938522, 0.10903293592464913), (0.11629567950985942, 0.4231534911223068), (0.07272515910098087, 0.6820778264822028), (0.8040489716606222, 0.6754397815415678), (0.021881288333483684, 0.9973048281795355), (0.13613294225960237, 0.3472265793961342), (0.5885921277970447, 0.4234936586362601), (0.6771274652333991, 0.4990940600809738), (0.7606453734295938, 0.46856050016910167), (0.0014737701239870837, 0.8549815354588411), (0.8497061684659817, 0.9449639991355748), (0.668515321324253, 0.4082428654212391), (0.7355579138605906, 0.5069117702346676), (0.5936202622790497, 0.7516703904373313), (0.7899147326804767, 0.5551643041568808), (0.6320431085306089, 0.5957263438432809), (0.4914639510289345, 0.45400879519415904), (0.6762977975631485, 0.8301595781646673), (0.8182128260893414, 0.5850279329400504), (0.2559024623146595, 0.7125493985208369), (0.5537011842891593, 0.4269799962923648), (0.3526793243478168, 0.748938497747309), (0.3981919850878649, 0.3351988010314725), (0.46016461390286567, 0.8123971468753639), (0.5768407326935198, 0.18237284071725457), (0.978572315141884, 0.9648759858159233), (0.5345553043062496, 0.4874208715788029), (0.4543685121939752, 0.6121953885169651), (0.6833876934898928, 0.03833319630931953), (0.8915284968990446, 0.48240690338033965), (0.7064455674297503, 0.15663496725518955), (0.6178905675370422, 0.6031499792626859), (0.733066094536376, 0.09020979367495041), (0.4944313621071622, 0.5968305696155186), (0.11731588857677355, 0.07078447661967258), (0.013203351956593168, 0.7665838835326823), (0.45042930980959295, 0.9362667143840896), (0.6970504104831576, 0.2087743233043785), (0.9909382720925285, 0.7006897100980327), (0.5240497436974141, 0.7881257517644302), (0.31328983512288366, 0.2844325520929284), (0.24563415679177858, 0.14236413423900018), (0.21679980770727636, 0.4387919917764408)])
